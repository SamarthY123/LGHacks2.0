import React, { useState, useEffect } from 'react';
import { MapPin, Home, Car, Package, AlertTriangle, Shield, CheckCircle, Navigation, Phone } from 'lucide-react';

export default function RefugeNetworkApp() {
  const [userType, setUserType] = useState(null);
  const [currentPage, setCurrentPage] = useState('home');
  const [locations, setLocations] = useState([]);
  const [rides, setRides] = useState([]);
  const [evidenceEntries, setEvidenceEntries] = useState([]);

  useEffect(() => {
    const handleKeyPress = (e) => {
      if (e.ctrlKey && e.shiftKey && e.key === 'E') {
        e.preventDefault();
        window.location.href = 'https://weather.com';
      }
    };
    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, []);

  const [newLocation, setNewLocation] = useState({
    type: 'safehouse',
    name: '',
    address: '',
    city: '',
    state: '',
    zip: '',
    capacity: ''
  });

  const [newRide, setNewRide] = useState({
    from: '',
    to: '',
    date: '',
    time: '',
    seats: ''
  });

  const [newEvidence, setNewEvidence] = useState({
    date: '',
    time: '',
    type: 'incident',
    description: '',
    location: ''
  });

  const handleAddLocation = (e) => {
    e.preventDefault();
    setLocations([...locations, {
      id: Date.now(),
      ...newLocation,
      verified: false
    }]);
    setNewLocation({
      type: 'safehouse',
      name: '',
      address: '',
      city: '',
      state: '',
      zip: '',
      capacity: ''
    });
    alert('Location added successfully!');
    setCurrentPage('manage-locations');
  };

  const handleAddRide = (e) => {
    e.preventDefault();
    setRides([...rides, {
      id: Date.now(),
      ...newRide
    }]);
    setNewRide({
      from: '',
      to: '',
      date: '',
      time: '',
      seats: ''
    });
    alert('Ride posted successfully!');
  };

  const handleAddEvidence = (e) => {
    e.preventDefault();
    setEvidenceEntries([...evidenceEntries, {
      id: Date.now(),
      ...newEvidence
    }]);
    setNewEvidence({
      date: '',
      time: '',
      type: 'incident',
      description: '',
      location: ''
    });
    alert('Evidence saved securely.');
  };

  if (currentPage === 'home') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-12">
            <Shield className="w-20 h-20 mx-auto text-indigo-600 mb-4" />
            <h1 className="text-5xl font-bold text-gray-800 mb-4">Refuge Network</h1>
            <p className="text-xl text-gray-600 mb-2">A Safe Haven System</p>
            <p className="text-sm text-gray-500 italic">Emergency Exit: Ctrl+Shift+E</p>
          </div>

          <div className="grid md:grid-cols-2 gap-6 mb-8">
            <button
              onClick={() => {
                setUserType('seeker');
                setCurrentPage('resources');
              }}
              className="bg-white p-8 rounded-2xl shadow-lg hover:shadow-xl transition-all"
            >
              <Navigation className="w-16 h-16 mx-auto text-blue-600 mb-4" />
              <h2 className="text-2xl font-bold text-gray-800 mb-2">I Need Help</h2>
              <p className="text-gray-600">Access resources and support</p>
            </button>

            <button
              onClick={() => {
                setUserType('host');
                setCurrentPage('add-location');
              }}
              className="bg-white p-8 rounded-2xl shadow-lg hover:shadow-xl transition-all"
            >
              <Home className="w-16 h-16 mx-auto text-green-600 mb-4" />
              <h2 className="text-2xl font-bold text-gray-800 mb-2">I Can Help</h2>
              <p className="text-gray-600">Offer safe haven or rides</p>
            </button>
          </div>

          <div className="bg-red-50 border-2 border-red-200 rounded-lg p-6 text-center">
            <AlertTriangle className="w-12 h-12 mx-auto text-red-600 mb-3" />
            <h3 className="text-lg font-bold text-red-800 mb-2">Safety First</h3>
            <p className="text-red-700">If in immediate danger, call 911</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {userType === 'seeker' && (
        <div className="bg-indigo-600 text-white p-4 shadow-lg">
          <div className="max-w-6xl mx-auto flex items-center justify-between flex-wrap gap-4">
            <div className="flex items-center gap-2">
              <Shield className="w-8 h-8" />
              <span className="text-xl font-bold">Refuge Network</span>
            </div>
            <nav className="flex gap-2 flex-wrap">
              <button onClick={() => { setCurrentPage('home'); setUserType(null); }} className="px-4 py-2 rounded bg-indigo-700 hover:bg-indigo-800">← Home</button>
              <button onClick={() => setCurrentPage('resources')} className={`px-4 py-2 rounded ${currentPage === 'resources' ? 'bg-white text-indigo-600' : 'hover:bg-indigo-700'}`}>Resources</button>
              <button onClick={() => setCurrentPage('map')} className={`px-4 py-2 rounded ${currentPage === 'map' ? 'bg-white text-indigo-600' : 'hover:bg-indigo-700'}`}>Map</button>
              <button onClick={() => setCurrentPage('evidence')} className={`px-4 py-2 rounded ${currentPage === 'evidence' ? 'bg-white text-indigo-600' : 'hover:bg-indigo-700'}`}>Evidence</button>
              <button onClick={() => setCurrentPage('feedback')} className={`px-4 py-2 rounded ${currentPage === 'feedback' ? 'bg-white text-indigo-600' : 'hover:bg-indigo-700'}`}>Feedback</button>
              <button onClick={() => setCurrentPage('about')} className={`px-4 py-2 rounded ${currentPage === 'about' ? 'bg-white text-indigo-600' : 'hover:bg-indigo-700'}`}>About</button>
            </nav>
          </div>
        </div>
      )}

      {userType === 'host' && (
        <div className="bg-green-600 text-white p-4 shadow-lg">
          <div className="max-w-6xl mx-auto flex items-center justify-between flex-wrap gap-4">
            <div className="flex items-center gap-2">
              <Shield className="w-8 h-8" />
              <span className="text-xl font-bold">Host Portal</span>
            </div>
            <nav className="flex gap-2 flex-wrap">
              <button onClick={() => { setCurrentPage('home'); setUserType(null); }} className="px-4 py-2 rounded bg-green-700 hover:bg-green-800">← Home</button>
              <button onClick={() => setCurrentPage('add-location')} className={`px-4 py-2 rounded ${currentPage === 'add-location' ? 'bg-white text-green-600' : 'hover:bg-green-700'}`}>Add Location</button>
              <button onClick={() => setCurrentPage('verify')} className={`px-4 py-2 rounded ${currentPage === 'verify' ? 'bg-white text-green-600' : 'hover:bg-green-700'}`}>Verify</button>
              <button onClick={() => setCurrentPage('manage-locations')} className={`px-4 py-2 rounded ${currentPage === 'manage-locations' ? 'bg-white text-green-600' : 'hover:bg-green-700'}`}>Manage</button>
              <button onClick={() => setCurrentPage('add-ride')} className={`px-4 py-2 rounded ${currentPage === 'add-ride' ? 'bg-white text-green-600' : 'hover:bg-green-700'}`}>Add Ride</button>
            </nav>
          </div>
        </div>
      )}

      <div className="p-8">
        {currentPage === 'resources' && (
          <div className="max-w-6xl mx-auto">
            <h1 className="text-4xl font-bold mb-8">Emergency Resources</h1>
            <div className="grid md:grid-cols-2 gap-6">
              <div className="bg-white p-6 rounded-xl shadow-lg">
                <Phone className="w-12 h-12 text-blue-600 mb-4" />
                <h2 className="text-2xl font-bold mb-4">Emergency Contacts</h2>
                <div className="space-y-3">
                  <div className="border-l-4 border-red-500 pl-4">
                    <p className="font-bold">Emergency Services</p>
                    <p className="text-2xl font-bold text-red-600">911</p>
                  </div>
                  <div className="border-l-4 border-purple-500 pl-4">
                    <p className="font-bold">Domestic Violence Hotline</p>
                    <p className="text-xl font-bold">1-800-799-7233</p>
                  </div>
                </div>
              </div>
              <div className="bg-white p-6 rounded-xl shadow-lg">
                <Car className="w-12 h-12 text-purple-600 mb-4" />
                <h2 className="text-2xl font-bold mb-4">Available Rides</h2>
                {rides.length === 0 ? (
                  <p className="text-gray-500 italic">No rides available</p>
                ) : (
                  <div className="space-y-3">
                    {rides.map(ride => (
                      <div key={ride.id} className="p-3 bg-gray-50 rounded-lg">
                        <p className="font-bold">{ride.from} to {ride.to}</p>
                        <p className="text-sm text-gray-600">{ride.date} at {ride.time}</p>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {currentPage === 'map' && (
          <div className="max-w-6xl mx-auto">
            <h1 className="text-4xl font-bold mb-4">Haven Map</h1>
            <div className="bg-white rounded-xl shadow-lg overflow-hidden">
              <div className="bg-gradient-to-r from-indigo-500 to-blue-500 h-96 flex items-center justify-center text-white">
                <div className="text-center">
                  <MapPin className="w-20 h-20 mx-auto mb-4" />
                  <p className="text-2xl font-bold">Interactive Map</p>
                  <p className="text-lg">Google Maps API Integration</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {currentPage === 'evidence' && (
          <div className="max-w-4xl mx-auto">
            <h1 className="text-4xl font-bold mb-4">Evidence Log</h1>
            <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
              <h2 className="text-2xl font-bold mb-4">Add Entry</h2>
              <form onSubmit={handleAddEvidence} className="space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-bold mb-2">Date</label>
                    <input type="date" value={newEvidence.date} onChange={(e) => setNewEvidence({...newEvidence, date: e.target.value})} className="w-full p-3 border rounded-lg" required />
                  </div>
                  <div>
                    <label className="block text-sm font-bold mb-2">Time</label>
                    <input type="time" value={newEvidence.time} onChange={(e) => setNewEvidence({...newEvidence, time: e.target.value})} className="w-full p-3 border rounded-lg" required />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-bold mb-2">Description</label>
                  <textarea value={newEvidence.description} onChange={(e) => setNewEvidence({...newEvidence, description: e.target.value})} className="w-full p-3 border rounded-lg h-32" required />
                </div>
                <button type="submit" className="w-full bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700 font-bold">Save Entry</button>
              </form>
            </div>
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-4">Your Log ({evidenceEntries.length})</h2>
              {evidenceEntries.length === 0 ? (
                <p className="text-gray-500 italic">No entries yet</p>
              ) : (
                <div className="space-y-4">
                  {evidenceEntries.map(entry => (
                    <div key={entry.id} className="border-l-4 border-red-500 p-4 bg-gray-50 rounded">
                      <span className="font-bold">{entry.date} at {entry.time}</span>
                      <p className="text-gray-800 mt-2">{entry.description}</p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {currentPage === 'feedback' && (
          <div className="max-w-3xl mx-auto">
            <h1 className="text-4xl font-bold mb-4">Feedback</h1>
            <div className="bg-white rounded-xl shadow-lg p-6">
              <form onSubmit={(e) => { e.preventDefault(); alert('Submitted'); }} className="space-y-4">
                <div>
                  <label className="block text-sm font-bold mb-2">Message</label>
                  <textarea className="w-full p-3 border rounded-lg h-40" required />
                </div>
                <button type="submit" className="w-full bg-indigo-600 text-white py-3 rounded-lg hover:bg-indigo-700 font-bold">Submit</button>
              </form>
            </div>
          </div>
        )}

        {currentPage === 'about' && (
          <div className="max-w-4xl mx-auto">
            <h1 className="text-4xl font-bold mb-8">About</h1>
            <div className="bg-white rounded-xl shadow-lg p-8">
              <h2 className="text-3xl font-bold mb-4">Our Mission</h2>
              <p className="text-lg text-gray-700">Refuge Network connects people in crisis with safe havens and resources.</p>
            </div>
          </div>
        )}

        {currentPage === 'add-location' && (
          <div className="max-w-4xl mx-auto">
            <h1 className="text-4xl font-bold mb-4">Add Location</h1>
            <div className="bg-white rounded-xl shadow-lg p-6">
              <form onSubmit={handleAddLocation} className="space-y-4">
                <div>
                  <label className="block text-sm font-bold mb-2">Name</label>
                  <input type="text" value={newLocation.name} onChange={(e) => setNewLocation({...newLocation, name: e.target.value})} className="w-full p-3 border rounded-lg" required />
                </div>
                <div>
                  <label className="block text-sm font-bold mb-2">Address</label>
                  <input type="text" value={newLocation.address} onChange={(e) => setNewLocation({...newLocation, address: e.target.value})} className="w-full p-3 border rounded-lg" required />
                </div>
                <div className="grid md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-bold mb-2">City</label>
                    <input type="text" value={newLocation.city} onChange={(e) => setNewLocation({...newLocation, city: e.target.value})} className="w-full p-3 border rounded-lg" required />
                  </div>
                  <div>
                    <label className="block text-sm font-bold mb-2">State</label>
                    <input type="text" value={newLocation.state} onChange={(e) => setNewLocation({...newLocation, state: e.target.value})} className="w-full p-3 border rounded-lg" required />
                  </div>
                  <div>
                    <label className="block text-sm font-bold mb-2">ZIP</label>
                    <input type="text" value={newLocation.zip} onChange={(e) => setNewLocation({...newLocation, zip: e.target.value})} className="w-full p-3 border rounded-lg" required />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-bold mb-2">Capacity</label>
                  <input type="number" value={newLocation.capacity} onChange={(e) => setNewLocation({...newLocation, capacity: e.target.value})} className="w-full p-3 border rounded-lg" required />
                </div>
                <button type="submit" className="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 font-bold">Add Location</button>
              </form>
            </div>
          </div>
        )}

        {currentPage === 'verify' && (
          <div className="max-w-4xl mx-auto">
            <h1 className="text-4xl font-bold mb-4">Verify Locations</h1>
            <div className="space-y-4">
              {locations.filter(l => !l.verified).length === 0 ? (
                <div className="bg-white rounded-xl shadow-lg p-8 text-center">
                  <CheckCircle className="w-16 h-16 mx-auto text-green-600 mb-4" />
                  <p className="text-gray-600">No pending locations</p>
                </div>
              ) : (
                locations.filter(l => !l.verified).map(loc => (
                  <div key={loc.id} className="bg-white rounded-xl shadow-lg p-6">
                    <h3 className="text-2xl font-bold mb-2">{loc.name}</h3>
                    <p className="text-gray-600">{loc.address}</p>
                    <button onClick={() => setLocations(locations.map(l => l.id === loc.id ? {...l, verified: true} : l))} className="mt-4 bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 font-bold">Verify</button>
                  </div>
                ))
              )}
            </div>
          </div>
        )}

        {currentPage === 'manage-locations' && (
          <div className="max-w-6xl mx-auto">
            <h1 className="text-4xl font-bold mb-4">Manage Locations</h1>
            <div className="space-y-4">
              {locations.length === 0 ? (
                <div className="bg-white rounded-xl shadow-lg p-8 text-center">
                  <Home className="w-16 h-16 mx-auto text-gray-400 mb-4" />
                  <p className="text-gray-600">No locations yet</p>
                </div>
              ) : (
                locations.map(loc => (
                  <div key={loc.id} className="bg-white rounded-xl shadow-lg p-6">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="text-2xl font-bold mb-2">{loc.name}</h3>
                        <p className="text-gray-600">{loc.address}</p>
                      </div>
                      <button onClick={() => setLocations(locations.filter(l => l.id !== loc.id))} className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700">Delete</button>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        )}

        {currentPage === 'add-ride' && (
          <div className="max-w-4xl mx-auto">
            <h1 className="text-4xl font-bold mb-4">Offer a Ride</h1>
            <div className="bg-white rounded-xl shadow-lg p-6">
              <form onSubmit={handleAddRide} className="space-y-4">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-bold mb-2">From</label>
                    <input type="text" value={newRide.from} onChange={(e) => setNewRide({...newRide, from: e.target.value})} className="w-full p-3 border rounded-lg" required />
                  </div>
                  <div>
                    <label className="block text-sm font-bold mb-2">To</label>
                    <input type="text" value={newRide.to} onChange={(e) => setNewRide({...newRide, to: e.target.value})} className="w-full p-3 border rounded-lg" required />
                  </div>
                </div>
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-bold mb-2">Date</label>
                    <input type="date" value={newRide.date} onChange={(e) => setNewRide({...newRide, date: e.target.value})} className="w-full p-3 border rounded-lg" required />
                  </div>
                  <div>
                    <label className="block text-sm font-bold mb-2">Time</label>
                    <input type="time" value={newRide.time} onChange={(e) => setNewRide({...newRide, time: e.target.value})} className="w-full p-3 border rounded-lg" required />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-bold mb-2">Seats</label>
                  <input type="number" value={newRide.seats} onChange={(e) => setNewRide({...newRide, seats: e.target.value})} className="w-full p-3 border rounded-lg" required />
                </div>
                <button type="submit" className="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 font-bold">Post Ride</button>
              </form>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
